// Copyright 2023 Rochus Keller <mailto:me@rochus-keller.ch>
// Active Oberon syntax for EbnfStudio
// - Converted syntax from appendix A of Reali, P. (2004): Active Oberon Language Report, Institut fur Computersysteme, 
//   ETH Zurich, see https://web.archive.org/web/20110524062849/http://bluebottle.ethz.ch/languagereport/ActiveReport.pdf
// - Moved statement terms to dedicated productions
// - Moved type terms to dedicated productions
// - Removed LL(1) ambigs from Qualident, Designator, Assignment vs Call, Typeguard vs Call
// - Adopted syntax to Bluebottle version March 12, 2004 (see https://github.com/OberonSystem3/AOS_Bluebottle_Sources)
// - Removed DEFINITION (not used a single time in Bluebottle 2004 source tree)

//#define HAVE_DEFINITION

Module ::= MODULE ident ';' [ImportList] 
#ifdef HAVE_DEFINITION
    {Definition} 
#endif
    DeclSeq [Body] END ident '.'
ImportDecl ::= ident [':=' ident]
ImportList ::= IMPORT ImportDecl {',' ImportDecl} ';'
#ifdef HAVE_DEFINITION
Definition ::= DEFINITION ident [REFINES Qualident] {PROCEDURE ident [FormalPars] ';'} END ident
#endif
DeclSeq ::= { CONST {ConstDecl ';'} | TYPE {TypeDecl ';'} | VAR {VarDecl ';'} | {ProcDecl ';'} }
ConstDecl ::= IdentDef '=' ConstExpr
TypeDecl ::= IdentDef '=' Type
VarDecl ::= IdentList ':' Type
Assembler ::= CODE
ProcDecl ::= PROCEDURE ( 
                            ProcHead ';' DeclSeq [Body|Assembler] END ident
                            | '^' ProcHead ) // forward declarations appear many times in Bluebottle source tree
ProcHead ::= [SysFlag] ['*' | '&' | '-'] IdentDef [FormalPars]
SysFlag ::= '[' ident ']' // NOTE: only used in IdentDef and only for 'UNTRACED' in AOS/Bluebottle source code
FormalPars ::= '(' [FPSection {';' FPSection}] ')' [':' Qualident]
FPSection ::= [VAR] ident {',' ident} ':' Type
ArrayType ::= ARRAY [SysFlag] [ConstExpr {',' ConstExpr}] OF Type
RecordType ::= RECORD [SysFlag] ['(' Qualident ')'] [FieldList] END
PointerType ::= POINTER [SysFlag] TO Type
ObjectType ::= OBJECT [[SysFlag] ['(' Qualident ')' ]  // NOTE: semi after base type most observed syntax error
#ifdef HAVE_DEFINITION
    [IMPLEMENTS Qualident] 
#endif
    DeclSeq // NOTE: missing semi after decls (in absence of procs) most observed syntax error
    [Body] END [ident] ] 
ProcedureType ::= PROCEDURE [SysFlag] [Attributes] [FormalPars]
AliasType ::= Qualident
Type ::= AliasType
		| ArrayType
		| RecordType
		| PointerType
		| ObjectType
		| ProcedureType
FieldDecl ::= [IdentList ':' Type]
FieldList ::= FieldDecl {';' FieldDecl}
Body ::= StatBlock
Attributes ::= '{'[ Attribute { ',' Attribute } ]'}' // found 75 ACTIVE, 74 DELEGATE, 882 EXCLUSIVE, 8 PRIORITY and 10 SAFE
Attribute ::= ident [ '(' ConstExpr ')' ] // PRIORITY (and only that) has one number argument
StatBlock ::= BEGIN [Attributes] [StatSeq]
StatSeq ::= Statement {';' Statement}
AssigOrCall ::= Designator [ ':=' Expr  ] // designator already includes '(' ExprList')'
IfStat ::= IF Expr THEN StatSeq {ELSIF Expr THEN StatSeq}[ELSE StatSeq] END
CaseStat ::= CASE Expr (DO|OF) Case {'|' Case} [ELSE StatSeq] END
WhileStat ::= WHILE Expr DO StatSeq END
RepeatStat ::= REPEAT StatSeq UNTIL Expr
ForStat ::= FOR ident ':=' Expr TO Expr [BY ConstExpr] DO StatSeq END
LoopStat ::= LOOP StatSeq END
WithStat ::= WITH Qualident ':' Qualident DO StatSeq END
ReturnStat ::= RETURN [Expr]
Statement ::= [ AssigOrCall
		| IfStat
		| CaseStat
		| WhileStat
		| RepeatStat
		| ForStat
		| LoopStat
		| WithStat
		| EXIT
		| ReturnStat
		| StatBlock END
		]
Case ::= [CaseLabels { ',' CaseLabels } ':' StatSeq]
CaseLabels ::= ConstExpr ['..' ConstExpr]
ConstExpr ::= Expr
Expr ::= SimpleExpr [Relation SimpleExpr]
SimpleExpr ::= ['+'|'-'] Term {AddOp Term}
Term ::= Factor {MulOp Factor}
Factor ::= Designator // this is now part of Designator ['(' ExprList')'] 
                 | number | hexchar | string
		| NIL | Set | '('Expr')'|'~'Factor
Set ::= '{' [Element {',' Element}] '}'
Element ::= Expr ['..' Expr]
Relation ::= '=' | '#' | '<' | '<=' | '>' | '>=' | IN | IS
MulOp ::= '*' | DIV | MOD | '/' | '&' 
AddOp ::= '+' | '-' | OR 
Designator ::= ident { Selector } // original is Qualident instead of ident
Selector ::= \LL:2\ '.' ident | '['ExprList']' | '^' 
                        | '(' [ExprList] ')' // orig was Qualident, combined typeguard and call
ExprList ::= Expr {',' Expr}
IdentList ::= IdentDef {',' IdentDef}
Qualident ::= \LA: 1:ident&2:'.'\ ident '.' ident | ident
IdentDef ::= ident ['*'|'-'] [SysFlag] // happens e.g. in AosHeap.Mod line 58


ident ::= // letter {letter | digit}

integer ::= // digit {digit} | digit {hexDigit} 'H'

real ::= // digit {digit} '.' {digit} [ScaleFactor]

ScaleFactor- ::= // 'E' ['+' | '-'] digit {digit}

number ::= integer | real

string ::= // '"' {character} '"' | digit {hexDigit} 'X'
hexchar ::=

comment- ::= '(*' '*)' 

/// Helper Tokens
Comment ::=


/// Pragmas
%namespace ::= 'Ao'
%suppress ::= ';' ',' '.' ':'
//%no_syntree ::= 'true'
